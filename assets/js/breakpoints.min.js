var breakpoints = function() {
  "use strict";
  var r = {
    list: null,
    media: {},
    events: [],
    init: function(e) {
      r.list = e,
      ["resize", "orientationchange", "load", "fullscreenchange"].forEach(function(t) {
        window.addEventListener(t, r.poll)
      })
    },
    active: function(e) {
      if (!r.media[e]) {
        var t, n, a, o, i = "",
        l = "eq",
        c = e;
        if (c.substr(0, 2) === ">=" ? (l = "gte", t = c.substr(2)) : c.substr(0, 2) === "<=" ? (l = "lte", t = c.substr(2)) : c[0] === ">" ? (l = "gt", t = c.substr(1)) : c[0] === "<" ? (l = "lt", t = c.substr(1)) : c[0] === "!" ? (l = "not", t = c.substr(1)) : (l = "eq", t = c), t && r.list[t]) {
          var f = r.list[t];
          if (Array.isArray(f)) {
            var d = parseInt(f[0]),
            h = parseInt(f[1]);
            isNaN(d) ? (isNaN(h) || (i = f[1].substr(String(h).length))) : i = f[0].substr(String(d).length);
            var p = isNaN(d),
            v = isNaN(h);
            a = p ? v ? "screen": l === "gte" ? "screen": "screen and (max-width: " + h + i + ")": v ? l === "gte" ? "screen and (min-width: " + d + i + ")": "screen": {
              gte: "screen and (min-width: " + d + i + ")",
              lte: "screen and (max-width: " + h + i + ")",
              gt: "screen and (min-width: " + (h + 1) + i + ")",
              lt: "screen and (max-width: " + (d - 1) + i + ")",
              not: "screen and (max-width: " + (d - 1) + i + "), screen and (min-width: " + (h + 1) + i + ")",
              eq: "screen and (min-width: " + d + i + ") and (max-width: " + h + i + ")"
            } [l]
          } else a = f[0] === "(" ? "screen and " + f: f;
          r.media[e] = a
        }
      }
      return !! r.media[e] && window.matchMedia(r.media[e]).matches
    },
    on: function(e, t) {
      r.events.push({
        query: e,
        handler: t,
        state: !1
      }),
      r.active(e) && t()
    },
    poll: function() {
      r.events.forEach(function(e) {
        r.active(e.query) ? e.state || (e.state = !0, e.handler()) : e.state && (e.state = !1)
      })
    }
  };
  return function(e) {
    return e._ = r,
    e.on = function(e, t) {
      r.on(e, t)
    },
    e.active = function(e) {
      return r.active(e)
    },
    e
  } ({})
} ();
